package ru.mephi.week1.lesson1;

import java.util.*;

public class Task1Solved {

    /**
     * <H2>–ó–∞–¥–∞—á–∞: –ì–æ–Ω–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π</H2>
     * <br>
     * <H2>üìå –ó–∞–¥–∞–Ω–∏–µ</H2>
     * <p>–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å–∏–º—É–ª–∏—Ä—É–µ—Ç –≥–æ–Ω–∫—É –º–µ–∂–¥—É –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏, –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –æ—Ç–¥–µ–ª—å–Ω—ã–º –ø–æ—Ç–æ–∫–æ–º. –ö–∞–∂–¥—ã–π –ø–æ—Ç–æ–∫ (–∞–≤—Ç–æ–º–æ–±–∏–ª—å) –±—É–¥–µ—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è —Å —Ä–∞–∑–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é, –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –≥–æ–Ω–∫–∏. –ì–æ–Ω–∫–∏ –¥–æ–ª–∂–Ω—ã –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ, –∏ –∫–∞–∂–¥—ã–π –ø–æ—Ç–æ–∫ –¥–æ–ª–∂–µ–Ω –¥–≤–∏–≥–∞—Ç—å—Å—è —Å —Ä–∞–∑–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é. –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –æ–±—ä—è–≤–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–≤—ã–º –ø—Ä–µ–æ–¥–æ–ª–µ–ª –¥–∏—Å—Ç–∞–Ω—Ü–∏—é.</p>
     * <br>
     * <H2>–£—Å–ª–æ–≤–∏—è</H2>
     * <ol>
     *    <li>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π (–ø–æ—Ç–æ–∫–æ–≤) –∑–∞–¥–∞—ë—Ç—Å—è –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3 –∞–≤—Ç–æ–º–æ–±–∏–ª—è).</li>
     *    <li>–ö–∞–∂–¥—ã–π –ø–æ—Ç–æ–∫ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å, –∫–æ—Ç–æ—Ä—ã–π –¥–≤–∏–≥–∞–µ—Ç—Å—è —Å —Ä–∞–∑–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–∞–¥–µ—Ä–∂–∫—É —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ `Thread.sleep()`).</li>
     *    <li>–î–∏—Å—Ç–∞–Ω—Ü–∏—è –≥–æ–Ω–∫–∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 100 –º–µ—Ç—Ä–æ–≤.</li>
     *    <li>–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –≤—Å–µ –ø–æ—Ç–æ–∫–∏ –∑–∞–≤–µ—Ä—à–∞—Ç —Å–≤–æ—é —Ä–∞–±–æ—Ç—É, –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –æ–±—ä—è–≤–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è ‚Äî —Ç–æ—Ç, –∫—Ç–æ –ø–µ—Ä–≤—ã–º –ø—Ä–µ–æ–¥–æ–ª–µ–ª –¥–∏—Å—Ç–∞–Ω—Ü–∏—é.</li>
     *    <li>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ—Ç–æ–¥ `join()` –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≥–ª–∞–≤–Ω—ã–π –ø–æ—Ç–æ–∫ –¥–æ–∂–¥–∞–ª—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤.</li>
     *    <li>–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—ä—è–≤–ª–µ–Ω –≥–ª–∞–≤–Ω—ã–º –ø–æ—Ç–æ–∫–æ–º, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Ç–æ–∫–∞.</li>
     * </ol>
     */

    static class Car extends Thread {
        private String name;
        private int distance = 100;
        private long[] finishTimes;
        private int index;

        public Car(String name, long[] finishTimes, int index) {
            this.name = name;
            this.finishTimes = finishTimes;
            this.index = index;
        }

        @Override
        public void run() {
            Random rand = new Random();
            int progress = 0;

            while (progress < distance) {
                try {
                    Thread.sleep(rand.nextInt(200) + 100);
                } catch (InterruptedException e) {
                    throw new RuntimeException(e);
                }

                progress += rand.nextInt(10) + 1;
                System.out.println(name + " –ø—Ä–æ–µ—Ö–∞–ª " + progress + " –º.");
            }

            finishTimes[index] = System.currentTimeMillis();
            System.out.println("\n " + name + " –§–ò–ù–ò–®–ò–†–û–í–ê–õ!");
        }
    }


    public static void main(String[] args) {

        String[] carNames = {"Ferrari", "Lamborghini", "Porsche"};
        int numCars = carNames.length;
        long[] finishTimes = new long[numCars];
        Car[] cars = new Car[numCars];

        for (int i = 0; i < numCars; i++) {
            cars[i] = new Car(carNames[i], finishTimes, i);
            cars[i].start();
        }

        for (Car car : cars) {
            try {
                car.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }

        int winnerIndex = 0;
        for (int i = 1; i < numCars; i++) {
            if (finishTimes[i] < finishTimes[winnerIndex]) {
                winnerIndex = i;
            }
        }

        System.out.println("\n –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –≥–æ–Ω–∫–∏: " + carNames[winnerIndex] + "! üèÅ");
        System.out.println("–ì–æ–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");

    }

}
