package ru.mephi.week2.lesson2.collections.task;

import java.util.UUID;
import java.util.concurrent.ConcurrentLinkedQueue;

public class ConcurrentCollectionTaskSolved {

    /**
     * <H2>–ó–∞–¥–∞—á–∞: –ü–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–µ</H2>
     * <br>
     * <H2>üìå –ó–∞–¥–∞–Ω–∏–µ</H2>
     * <p>–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–µ,
     * –∫–æ—Ç–æ—Ä–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–π —Å—Ä–µ–¥–µ.</p>
     * <p>–ó–∞–∫–∞–∑—ã –ø–æ—Å—Ç—É–ø–∞—é—Ç –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –æ—á–µ—Ä–µ–¥—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–æ—Å–ª–µ —á–µ–≥–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Ç–æ–∫–æ–≤-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
     * –∑–∞–±–∏—Ä–∞—é—Ç –∑–∞–∫–∞–∑—ã –∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç –∏—Ö.</p>
     * <br>
     * <H2>–£—Å–ª–æ–≤–∏—è</H2>
     * <ol>
     *    <li>–ù–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Ç–æ–∫–æ–≤ –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∑–∞–∫–∞–∑—ã –≤ –æ—á–µ—Ä–µ–¥—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.</li>
     *    <li>–ù–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Ç–æ–∫–æ–≤-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∑–∞–±–∏—Ä–∞—é—Ç –∑–∞–∫–∞–∑—ã –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –∏—Ö.</li>
     *    <li>–ö–∞–∂–¥—ã–π –∑–∞–∫–∞–∑ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω —Ä–∞–∑.</li>
     *    <li>–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã –ø—Ä–æ—Å—Ç–∞–∏–≤–∞—Ç—å, –µ—Å–ª–∏ –≤ –æ—á–µ—Ä–µ–¥–∏ –µ—Å—Ç—å –∑–∞–∫–∞–∑—ã.</li>
     *    <li>–í—ã–±–æ—Ä –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–æ–ª–∂–µ–Ω –æ–±–µ—Å–ø–µ—á–∏—Ç—å –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –≤—ã—Å–æ–∫—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å.</li>
     * </ol>
     * <br>
     * <H2>–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã:</H2>
     * <pre>
     * –î–æ–±–∞–≤–∏—Ç–µ–ª—å-1 –¥–æ–±–∞–≤–∏–ª –∑–∞–∫–∞–∑: –ó–∞–∫–∞–∑ #5a3b4e89
     * –î–æ–±–∞–≤–∏—Ç–µ–ª—å-2 –¥–æ–±–∞–≤–∏–ª –∑–∞–∫–∞–∑: –ó–∞–∫–∞–∑ #f67c8d12
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫-1 –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–∫–∞–∑: –ó–∞–∫–∞–∑ #5a3b4e89
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫-2 –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–∫–∞–∑: –ó–∞–∫–∞–∑ #f67c8d12
     * –î–æ–±–∞–≤–∏—Ç–µ–ª—å-1 –¥–æ–±–∞–≤–∏–ª –∑–∞–∫–∞–∑: –ó–∞–∫–∞–∑ #a9e12d34
     * –î–æ–±–∞–≤–∏—Ç–µ–ª—å-2 –¥–æ–±–∞–≤–∏–ª –∑–∞–∫–∞–∑: –ó–∞–∫–∞–∑ #c56b7f99
     * ...
     * –í—Å–µ –∑–∞–∫–∞–∑—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!
     * </pre>
     */

    private final static ConcurrentLinkedQueue<String> orderQueue = new ConcurrentLinkedQueue<>();

    public static void addOrder(String order) {
        orderQueue.offer(order);
        System.out.println(Thread.currentThread().getName() + " –¥–æ–±–∞–≤–∏–ª –∑–∞–∫–∞–∑: " + order);
    }

    public static void processOrders() {
        String order;
        while ((order = orderQueue.poll()) != null) {
            System.out.println(Thread.currentThread().getName() + " –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–∫–∞–∑: " + order);
            try {
                Thread.sleep(500);
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
        }
    }

    public static void main(String[] args) throws InterruptedException {
        Runnable orderAdder = () -> {
            for (int i = 0; i < 5; i++) {
                addOrder("–ó–∞–∫–∞–∑ #" + UUID.randomUUID());
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                }
            }
        };

        Runnable orderProcessor = ConcurrentCollectionTaskSolved::processOrders;

        Thread adder1 = new Thread(orderAdder, "–ü–æ—Å—Ç–∞–≤—â–∏–∫-1");
        Thread adder2 = new Thread(orderAdder, "–ü–æ—Å—Ç–∞–≤—â–∏–∫-2");
        Thread processor1 = new Thread(orderProcessor, "–û–±—Ä–∞–±–æ—Ç—á–∏–∫-1");
        Thread processor2 = new Thread(orderProcessor, "–û–±—Ä–∞–±–æ—Ç—á–∏–∫-2");

        adder1.start();
        adder2.start();

        Thread.sleep(500);

        processor1.start();
        processor2.start();

        adder1.join();
        adder2.join();
        processor1.join();
        processor2.join();

        System.out.println("–í—Å–µ –∑–∞–∫–∞–∑—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã");
    }

}
