package ru.mephi.week3.lesson1.task;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

public class RestaurantSimulatorSolved {

    /**
     * <H2>–ó–∞–¥–∞—á–∞: –°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞</H2>
     * <br>
     * <H2>üìå –ó–∞–¥–∞–Ω–∏–µ</H2>
     * <p>–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ, —á—Ç–æ –≤—ã —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç–µ —Å–∏—Å—Ç–µ–º—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞.
     * –ó–∞–∫–∞–∑—ã –ø–æ—Å—Ç—É–ø–∞—é—Ç –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤, –∑–∞—Ç–µ–º –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –Ω–∞ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ,
     * –ø–æ—Å–ª–µ —á–µ–≥–æ –∫—É—Ä—å–µ—Ä—ã –∏—Ö –¥–æ—Å—Ç–∞–≤–ª—è—é—Ç. </p>
     *
     * <p>–í–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äì —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π —Å–∏—Å—Ç–µ–º—ã
     * —Å –ø–æ–º–æ—â—å—é `ExecutorService`, —Ç–∞–∫ —á—Ç–æ–±—ã:</p>
     * <ul>
     *    <li>–ó–∞–∫–∞–∑—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏—Å—å –∏ –ø–µ—Ä–µ–¥–∞–≤–∞–ª–∏—Å—å –Ω–∞ –∫—É—Ö–Ω—é</li>
     *    <li>–ö—É—Ö–Ω—è –≥–æ—Ç–æ–≤–∏–ª–∞ –±–ª—é–¥–∞ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ—Ç–æ–∫–∞—Ö</li>
     *    <li>–ö—É—Ä—å–µ—Ä—ã –¥–æ—Å—Ç–∞–≤–ª—è–ª–∏ –≥–æ—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã</li>
     * </ul>
     *
     * <H2>üí° –£—Å–ª–æ–≤–∏—è:</H2>
     * <ol>
     *    <li>–ó–∞–∫–∞–∑—ã –ø–æ—Å—Ç—É–ø–∞—é—Ç –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É.</li>
     *    <li>–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞ –∑–∞–Ω–∏–º–∞–µ—Ç 3 —Å–µ–∫—É–Ω–¥—ã.</li>
     *    <li>–î–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç 2 —Å–µ–∫—É–Ω–¥—ã.</li>
     *    <li>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ ‚Äì 10.</li>
     * </ol>
     *
     * <br>
     */

    private static final int ORDER_COUNT = 10;

    public static void main(String[] args) {
        ExecutorService orderService = Executors.newSingleThreadExecutor();
        ExecutorService kitchenService = Executors.newFixedThreadPool(2);
        ExecutorService deliveryService = Executors.newCachedThreadPool();

        for (int i = 1; i <= ORDER_COUNT; i++) {
            int orderId = i;
            orderService.submit(() -> {
                System.out.println("–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #" + orderId);
                kitchenService.submit(() -> prepareOrder(orderId, deliveryService));
            });

            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
        }

        shutdownAndAwaitTermination(orderService);
        shutdownAndAwaitTermination(kitchenService);
        deliveryService.shutdown();
    }

    private static void prepareOrder(int orderId, ExecutorService deliveryService) {
        System.out.println("–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ #" + orderId);
        try {
            Thread.sleep(3000); // –í—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
        System.out.println("–ó–∞–∫–∞–∑ #" + orderId + " –≥–æ—Ç–æ–≤! –ü–µ—Ä–µ–¥–∞—ë–º –∫—É—Ä—å–µ—Ä—É.");
        deliveryService.submit(() -> deliverOrder(orderId));
    }

    private static void deliverOrder(int orderId) {
        System.out.println("–ö—É—Ä—å–µ—Ä –¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞–∫–∞–∑ #" + orderId);
        try {
            Thread.sleep(2000); // –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
        System.out.println("–ó–∞–∫–∞–∑ #" + orderId + " –¥–æ—Å—Ç–∞–≤–ª–µ–Ω!");
    }

    private static void shutdownAndAwaitTermination(ExecutorService executor) {
        executor.shutdown();
        try {
            if (!executor.awaitTermination(10, TimeUnit.SECONDS)) {
                executor.shutdownNow();
            }
        } catch (InterruptedException e) {
            executor.shutdownNow();
            Thread.currentThread().interrupt();
        }
    }

}
