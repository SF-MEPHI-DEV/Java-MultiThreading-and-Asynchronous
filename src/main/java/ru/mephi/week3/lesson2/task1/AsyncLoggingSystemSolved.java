package ru.mephi.week3.lesson2.task1;

import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.concurrent.*;

public class AsyncLoggingSystemSolved {

    /**
     * <H2>–ó–∞–¥–∞—á–∞: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è</H2>
     * <br>
     * <H2>üìå –ó–∞–¥–∞–Ω–∏–µ</H2>
     * <p>–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è, –≤ –∫–æ—Ç–æ—Ä–æ–π –ª–æ–≥–∏ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ,
     * —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã.</p>
     * <p>–ö–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ª–æ–≥–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º <b>Callable</b> –∏ <b>Future</b>.</p>
     * <br>
     * <H2>–£—Å–ª–æ–≤–∏—è</H2>
     * <ol>
     *    <li>–ï—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Ç–æ–∫–æ–≤, –≥–µ–Ω–µ—Ä–∏—Ä—É—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è –ª–æ–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–±—ã—Ç–∏—è —Å–∏—Å—Ç–µ–º—ã).</li>
     *    <li>–ö–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –≤ —Ñ–∞–π–ª `logs.txt`.</li>
     *    <li>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å {@code Callable<String>} –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ `Future<String>` –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.</li>
     *    <li>–û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω –∂–¥–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –∫–∞–∂–¥–æ–≥–æ –ª–æ–≥–∞.</li>
     *    <li>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `ExecutorService` –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞–º–∏.</li>
     * </ol>
     * <br>
     * <H2>–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã:</H2>
     * <pre>
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π...
     * [INFO] 2025-02-10 12:00:01 - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É.
     * [WARNING] 2025-02-10 12:00:03 - –ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–∞–º—è—Ç–∏.
     * [ERROR] 2025-02-10 12:00:05 - –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É.
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.
     * </pre>
     * <br>
     * <H2>–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç</H2>
     * <p>–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã –≤ —Ñ–∞–π–ª–µ `logs.txt` –¥–æ–ª–∂–Ω—ã –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤—Å–µ –ª–æ–≥–∏, –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ.</p>
     */

    public static void main(String[] args) throws InterruptedException {

        ExecutorService executorService = Executors.newCachedThreadPool();
        LogConsoleDuplicator<String> logConsoleDuplicator = new LogConsoleDuplicator<>();

        System.out.println("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π");

        Future<String> future1 = executorService.submit(new LogTask("[INFO] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É."));
        Future<String> future2 = executorService.submit(new LogTask("[WARNING] –ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–∞–º—è—Ç–∏."));
        Future<String> future3 = executorService.submit(new LogTask("[ERROR] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É."));

        logConsoleDuplicator.addLog(future1);
        logConsoleDuplicator.addLog(future2);
        logConsoleDuplicator.addLog(future3);

        System.out.println("–û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç—É...");

        executorService.shutdown();

        try {
            executorService.awaitTermination(1, TimeUnit.MINUTES);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        System.out.println("–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.");
        logConsoleDuplicator.shutdown();
    }
}

class LogTask implements Callable<String> {
    private final String message;

    public LogTask(String message) {
        this.message = message;
    }

    @Override
    public String call() throws Exception {

        String timestamp = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date());
        String logEntry = message + " - " + timestamp;

        try (FileWriter writer = new FileWriter("logs.txt", true)) {
            writer.write(logEntry + System.lineSeparator());
        } catch (IOException e) {
            e.printStackTrace();
        }

        return logEntry;
    }
}

class LogConsoleDuplicator<T> extends Thread {

    private final ConcurrentLinkedQueue<Future<String>> logs;
    private boolean shouldShutdown;

    public LogConsoleDuplicator() {
        logs = new ConcurrentLinkedQueue<>();
        // setDaemon(true);
        shouldShutdown = false;
        start();
    }

    public void addLog(Future<String> log) {
        logs.add(log);
    }

    public void shutdown() {
        shouldShutdown = true;
    }


    @Override
    public void run() {
        while (!shouldShutdown) {
            while (!logs.isEmpty()) {

                var removingItems = logs.stream().filter(Future::isDone).toList();
                removingItems.forEach(it -> {
                    try {
                        System.out.println("From duplication module" + it.get());
                    } catch (InterruptedException | ExecutionException e) {
                        throw new RuntimeException(e);
                    }
                });
                logs.removeAll(removingItems);
                try {
                    sleep(100);
                } catch (InterruptedException e) {
                    shouldShutdown = true;
                    throw new RuntimeException(e);
                }

            }
        }
        System.out.println("out of while");
    }
}